{"version":3,"sources":["provider/appProvider.js","components/Toggle/Toggle.js","components/Header/Header.js","data/data.js","reducers/cardReducer.js","data/imageMap.js","components/Card/Card.js","components/CardGrid/CardGrid.js","App.js","serviceWorker.js","index.js","assets/svgs/spade.svg","assets/svgs/coin.svg","assets/svgs/star.svg","assets/svgs/10Coin.svg","assets/svgs/20Coin.svg","assets/svgs/1up.svg","assets/svgs/flower.svg","assets/svgs/mushroom.svg"],"names":["AppContext","React","createContext","AppHookContext","AppHookProvider","Provider","Toggle","clickHandle","setAltTheme","useContext","altTheme","className","onClick","src","require","alt","Header","turns","cardCount","Promise","resolve","reject","Error","uniqueCards","data","Array","map","card","i","shift","img","label","cardArray","length","j","Math","floor","random","temp","shuffle","cardReducer","state","action","type","firstCard","payload","secondCard","matchedCards","undefined","imageMap","0","1","2","3","4","5","Card","index","selectCard","isSelected","isMatched","flipCard","onKeyDown","e","keyCode","aria-hidden","role","tabIndex","aria-label","cardBackSvg","draggable","style","filter","CardGrid","initialState","victory","setVictory","setTurns","useReducer","dispatch","useState","cardData","setCardData","useEffect","a","setupCards","fetchCards","resetClick","disabled","key","includes","setTimeout","handleClick","App","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"iNAEaA,EAAaC,IAAMC,cAAc,IACjCC,EAAiBF,IAAMC,cAAc,IACrCE,EAAkBD,EAAeE,SAC/BL,IAAf,SCsBeM,G,MAvBA,SAAC,GAAkB,EAAjBC,YAAkB,IAC1BC,EAAeC,qBAAWN,GAA1BK,YACAE,EAAYD,qBAAWT,GAAvBU,SAMP,OACE,yBAAKC,UAAS,gBAAWD,EAAW,mBAAqB,IAAME,QALlD,WACbJ,GAAaE,KAKX,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,sCACb,oCAEF,yBAAKA,UAAU,gCACb,yBAAKE,IAAKC,EAAQ,IAA+BC,IAAI,wBAEvD,yBAAKJ,UAAU,sBCJRK,G,MAZA,WAAO,IACbC,EAASR,qBAAWT,GAApBiB,MAEP,OACE,gCACE,2CACA,qCAAWA,GACX,kBAAC,EAAD,S,yDCFS,WAACC,GACd,OAAO,IAAIC,SAAS,SAACC,EAASC,GACxBH,EAAY,IAAM,GAAGG,EAAO,IAAIC,MAAM,sCAC1C,IAAIC,EAAcL,EAAY,EAE1BM,EAAO,YAAIC,MAAMF,IAAcG,KAAK,SAACC,EAAMC,GAC7C,IAAIC,EAAQ,EACRC,EAAM,EAUV,OATGF,EAAI,IACLC,EAAQ,GACRC,EAAMF,EAAI,IACFA,EAAI,GACZC,EAAQ,IACRC,EAAMF,EAAI,GAEVE,EAAMF,EAED,CAACG,MAAOH,EAAE,EAAGC,QAAOC,UAW7BV,EADAI,EArCY,SAACQ,GACf,IAAK,IAAIJ,EAAII,EAAUC,OAAS,EAAGL,EAAI,EAAGA,IAAK,CAC7C,IAAMM,EAAIC,KAAKC,MAAMD,KAAKE,SAAWT,GAC/BU,EAAON,EAAUJ,GACvBI,EAAUJ,GAAKI,EAAUE,GACzBF,EAAUE,GAAKI,EAEjB,OAAON,EA8BEO,CAHPf,GADAA,EAAI,sBAAOA,GAAP,YAAgBA,KACRE,KAAK,SAAAC,GACf,OAAO,eAAIA,YCOFa,EAzCK,SAACC,EAAOC,GAC1B,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,2BACFF,GADL,IAEEG,UAAWF,EAAOG,UAGtB,IAAK,gBACH,OAAO,2BACFJ,GADL,IAEEK,WAAYJ,EAAOG,UAGvB,IAAK,gBACH,OAAO,2BACFJ,GADL,IAEEM,aAAa,GAAD,mBAAMN,EAAMM,cAAZ,CAA0BN,EAAMG,UAAWH,EAAMK,aAC7DF,eAAWI,EACXF,gBAAYE,IAGhB,IAAK,iBACH,OAAO,2BACFP,GADL,IAEEG,eAAWI,EACXF,gBAAYE,IAGhB,IAAK,eACH,OAAO,2BACFP,GADL,IAEEG,eAAWI,EACXF,gBAAYE,EACZD,aAAc,KAGlB,QACE,MAAM,IAAIzB,MAAM,yBC/BP2B,EARE,CACfC,EAAGpC,EAAQ,IACXqC,EAAGrC,EAAQ,IACXsC,EAAGtC,EAAQ,IACXuC,EAAGvC,EAAQ,IACXwC,EAAGxC,EAAQ,IACXyC,EAAGzC,EAAQ,K,yBCwCE0C,EAvCF,SAAC,GAAmE,IAAlEzB,EAAiE,EAAjEA,MAAOD,EAA0D,EAA1DA,IAAKD,EAAqD,EAArDA,MAAO4B,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,UACxDlD,EAAYD,qBAAWT,GAAvBU,SACDmD,EAAW,YACdF,GAAcD,KAajB,OACE,yBAAK9C,QAXiB,WACtBiD,KAU+BC,UAPP,SAACC,GACP,KAAdA,EAAEC,SAAgC,KAAdD,EAAEC,SACxBH,KAK2DlD,UAAS,cAASgD,EAAa,kBAAoB,IAA1C,OAA+CC,EAAY,iBAAmB,IAAMK,cAAaL,EAAWM,KAAK,SAASC,SAAS,IAAIC,aAAA,eAAoBX,EAAQ,IACvO,yBAAK9C,UAAU,eACb,yBAAKA,UAAU,cACXD,EAA8D,wCAAnD,yBAAKG,IAAKwD,IAAatD,IAAI,uBAE1C,yBAAKJ,UAAU,eACXD,EAAgI,8BAAOqB,GAA5H,yBAAKuC,UAAU,QAAQC,MAAO,CAACC,OAAO,cAAD,OAAgB3C,EAAhB,SAA8BhB,IAAKoC,EAASnB,GAAMf,IAAI,4BC8DnG0D,G,OAjFE,WACf,IAAMC,EAAe,CACnB9B,eAAWI,EACXF,gBAAYE,EACZD,aAAc,IAJK,EAQItC,qBAAWT,GAA7BiB,EARc,EAQdA,MAAO0D,EARO,EAQPA,QARO,EASUlE,qBAAWN,GAAnCyE,EATc,EASdA,WAAYC,EATE,EASFA,SATE,EAUKC,qBAAWtC,EAAakC,GAV7B,mBAUdjC,EAVc,KAUPsC,EAVO,KAWdhC,EAAuCN,EAAvCM,aAAcH,EAAyBH,EAAzBG,UAAWE,EAAcL,EAAdK,WAXX,EAYWkC,mBAAS,IAZpB,mBAYdC,EAZc,KAYJC,EAZI,KAcrBC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACEC,EAlBR,IAiBM,OACX7D,EADW,OAEjB0D,EAAY1D,GAFK,2CAAH,qDAIhB8D,KACA,IAEFH,qBAAU,WAxBK,KAyBVpC,EAAad,QAA0B0C,GACxCC,GAAW,KAGZ,CAAC7B,EAAc4B,EAASC,IAE3B,IAmBMW,EAAU,uCAAG,4BAAAH,EAAA,6DACjBL,EAAS,CAACpC,KAAM,iBAChBiC,GAAW,GACXC,EAAS,GAHQ,SAIAQ,EAtDJ,IAkDI,OAIb7D,EAJa,OAKjB0D,EAAY1D,GALK,2CAAH,qDAQhB,OACE,0BAAMb,UAAU,QACXgE,GACC,oCACE,yBAAKhE,UAAU,kBACb,wCACA,4BAAQA,UAAU,MAAM6E,UAAWb,EAAS/D,QAAS,kBAAM2E,MAA3D,gBAIR,yBAAK5E,UAAU,YACZsE,EAASvD,KAAK,SAACC,EAAKC,GAAN,OACb,kBAAC,EAAD,iBACMD,EADN,CAEE8B,MAAO7B,EACP6D,IAAKA,IAAI9D,GACTiC,UAAWb,EAAa2C,SAAS/D,GACjCgC,WAAYf,IAAcjB,GAAQmB,IAAenB,EACjD+B,WAAY,kBA7CF,SAAC/B,GAChBiB,IAAcjB,QAAuBqB,IAAfF,GAA4BC,EAAa2C,SAAS/D,UAC1DqB,IAAdJ,EACDmC,EAAS,CAACpC,KAAK,eAAgBE,QAASlB,IAC/BiB,EAAUb,QAAUJ,EAAKI,OAClC8C,EAAS5D,EAAQ,GACjB8D,EAAS,CAACpC,KAAK,gBAAiBE,QAASlB,IACzCgE,YAAW,WACTZ,EAAS,CAACpC,KAAK,oBACd,OAEHkC,EAAS5D,EAAQ,GACjB8D,EAAS,CAACpC,KAAK,gBAAiBE,QAASlB,IACzCgE,YAAW,WACTZ,EAAS,CAACpC,KAAK,qBACd,OA8BqBiD,CAAYjE,c,OC9D3BkE,MAjBf,WAAgB,IAAD,EACiBb,oBAAS,GAD1B,mBACNL,EADM,KACGC,EADH,OAEaI,mBAAS,GAFtB,mBAEN/D,EAFM,KAEC4D,EAFD,OAGmBG,oBAAS,GAH5B,mBAGNtE,EAHM,KAGIF,EAHJ,KAKb,OACE,yBAAKG,UAAS,aAAQD,EAAW,aAAe,KAC9C,kBAACN,EAAD,CAAiB0F,MAAO,CAAClB,aAAYC,WAAUrE,gBAC7C,kBAAC,EAAD,CAAasF,MAAO,CAACnB,UAAS1D,QAAOP,aACnC,kBAAC,EAAD,MACA,kBAAC,EAAD,UCJUqF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,mC,6ECA3CD,EAAOC,QAAU,IAA0B,kC,wCCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.b7f63e9e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const AppContext = React.createContext({});\r\nexport const AppHookContext = React.createContext({});\r\nexport const AppHookProvider = AppHookContext.Provider;\r\nexport default AppContext.Provider;","import React, {useContext} from 'react';\r\nimport {AppContext, AppHookContext} from '../../provider/appProvider';\r\nimport './Toggle.scss';\r\n\r\nconst Toggle = ({clickHandle}) => {\r\n  const {setAltTheme} = useContext(AppHookContext);\r\n  const {altTheme} = useContext(AppContext);\r\n\r\n  const toggle = () => {\r\n    setAltTheme(!altTheme);\r\n  }\r\n\r\n  return (\r\n    <div className={`toggle${altTheme ? ' toggle--checked' : ''}`} onClick={toggle}>\r\n      <div className=\"toggle__track\">\r\n        <div className=\"toggle__icon toggle__icon--checked\">\r\n          <span>#</span>\r\n        </div>\r\n        <div className=\"toggle__icon toggle__icon--x\">\r\n          <img src={require('../../assets/svgs/coin.svg')} alt=\"smb3 theme checked\" />\r\n        </div>\r\n        <div className=\"toggle__thumb\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toggle;","import React, {useContext} from 'react';\r\nimport {AppContext} from '../../provider/appProvider';\r\nimport Toggle from '../Toggle/Toggle';\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n  const {turns} = useContext(AppContext);\r\n\r\n  return (\r\n    <header>\r\n      <h1>Memory Game</h1>\r\n      <h3>Turns:{turns}</h3>\r\n      <Toggle/>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","const shuffle = (cardArray) => {\r\n  for (let i = cardArray.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * i);\r\n    const temp = cardArray[i];\r\n    cardArray[i] = cardArray[j];\r\n    cardArray[j] = temp;\r\n  }\r\n  return cardArray;\r\n}\r\n\r\nexport default (cardCount) => {\r\n  return new Promise( (resolve, reject) => {\r\n    if (cardCount % 2 !== 0) reject(new Error('must request even number of cards'));\r\n    let uniqueCards = cardCount / 2;\r\n    // let data = [...Array(uniqueCards)];\r\n    let data = [...Array(uniqueCards)].map( (card, i) => {\r\n      let shift = 0;\r\n      let img = 0;\r\n      if(i > 11) {\r\n        shift = 90;\r\n        img = i - 12;\r\n      } else if(i > 5){\r\n        shift = 270;\r\n        img = i - 6;\r\n      } else {\r\n        img = i;\r\n      }\r\n      return {label: i+1, shift, img};\r\n    })\r\n    // let data = [];\r\n    // for(let i = 0; i < uniqueCards; i++){\r\n    //   data[i] = {label: i+1};\r\n    // }\r\n    data = [...data, ...data];\r\n    data = data.map( card => {\r\n      return {...card}\r\n    });\r\n    data = shuffle(data);\r\n    resolve(data);\r\n  })\r\n}\r\n","\r\nconst cardReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'setFirstCard': {\r\n      return {\r\n        ...state,\r\n        firstCard: action.payload\r\n      }\r\n    }\r\n    case 'setSecondCard': {\r\n      return {\r\n        ...state,\r\n        secondCard: action.payload\r\n      }\r\n    }\r\n    case 'matchSelected': {\r\n      return {\r\n        ...state,\r\n        matchedCards: [...state.matchedCards, state.firstCard, state.secondCard],\r\n        firstCard: undefined,\r\n        secondCard: undefined,\r\n      }\r\n    }\r\n    case 'resetSelection': {\r\n      return {\r\n        ...state,\r\n        firstCard: undefined,\r\n        secondCard: undefined,\r\n      }\r\n    }\r\n    case 'resetMatches': {\r\n      return {\r\n        ...state,\r\n        firstCard: undefined,\r\n        secondCard: undefined,\r\n        matchedCards: [],\r\n      }\r\n    }\r\n    default:\r\n      throw new Error('unrecognized action');\r\n  }\r\n}\r\nexport default cardReducer;","const imageMap = {\r\n  0: require(`../assets/svgs/star.svg`),\r\n  1: require(`../assets/svgs/10Coin.svg`),\r\n  2: require(`../assets/svgs/20Coin.svg`),\r\n  3: require(`../assets/svgs/1up.svg`),\r\n  4: require(`../assets/svgs/flower.svg`),\r\n  5: require(`../assets/svgs/mushroom.svg`),\r\n}\r\nexport default imageMap;","import React, {useContext} from 'react';\r\nimport {AppContext} from '../../provider/appProvider';\r\nimport imageMap from '../../data/imageMap';\r\nimport PropTypes from 'prop-types';\r\nimport './Card.scss';\r\nimport cardBackSvg from '../../assets/svgs/spade.svg'\r\n\r\nconst Card = ({label, img, shift, index, selectCard, isSelected, isMatched}) => {\r\n  const {altTheme} = useContext(AppContext);\r\n  const flipCard = () => {\r\n    !isSelected && selectCard();\r\n  }\r\n  \r\n  const handleCardClick = () => {\r\n    flipCard();\r\n  }\r\n\r\n  const handleCardKeyDown = (e) => {\r\n    if (e.keyCode === 13 || e.keyCode === 32) {\r\n      flipCard();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div onClick={handleCardClick} onKeyDown={handleCardKeyDown} className={`card${isSelected ? ' card--selected' : ''}${isMatched ? ' card--matched' : ''}`} aria-hidden={isMatched} role=\"button\" tabIndex=\"0\" aria-label={`card-${index + 1}`}>\r\n      <div className=\"card__inner\">\r\n        <div className=\"card__back\">\r\n          {!altTheme ? <img src={cardBackSvg} alt='card back graphic'/> : <span>&diams;</span> }\r\n        </div>\r\n        <div className=\"card__front\">\r\n          {!altTheme ? <img draggable='false' style={{filter: `hue-rotate(${shift}deg)`}} src={imageMap[img]} alt='card inside graphic'/> : <span>{label}</span> }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nCard.propTypes = {\r\n  label: PropTypes.number.isRequired,\r\n  img: PropTypes.number.isRequired,\r\n  shift: PropTypes.number.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  selectCard: PropTypes.func.isRequired,\r\n  isSelected: PropTypes.bool.isRequired,\r\n  isMatched: PropTypes.bool.isRequired,\r\n}\r\nexport default Card;","import React, {useEffect, useState, useReducer, useContext} from 'react';\r\nimport {AppContext, AppHookContext} from '../../provider/appProvider';\r\nimport key from 'weak-key';\r\nimport setupCards from '../../data/data';\r\nimport cardReducer from '../../reducers/cardReducer';\r\n\r\nimport Card from '../Card/Card';\r\nimport './CardGrid.scss';\r\n\r\nlet totalCards = 24;\r\n\r\nconst CardGrid = () => {\r\n  const initialState = {\r\n    firstCard: undefined,\r\n    secondCard: undefined,\r\n    matchedCards: [],\r\n  \r\n  }\r\n  \r\n  const {turns, victory} = useContext(AppContext);\r\n  const {setVictory, setTurns} = useContext(AppHookContext);\r\n  const [state, dispatch] = useReducer(cardReducer, initialState);\r\n  const {matchedCards, firstCard, secondCard} = state;\r\n  const [cardData, setCardData] = useState([]);\r\n  \r\n  useEffect(()=>{\r\n    const fetchCards = async () => {\r\n      const data = await setupCards(totalCards);\r\n      setCardData(data);\r\n    }   \r\n    fetchCards();\r\n  },[]);\r\n\r\n  useEffect(()=>{\r\n    if(matchedCards.length === totalCards && !victory) {\r\n      setVictory(true)\r\n    };\r\n\r\n  }, [matchedCards, victory, setVictory]);\r\n\r\n  const handleClick = (card) => {\r\n    if(firstCard === card || secondCard !== undefined || matchedCards.includes(card) ) return;\r\n    if(firstCard === undefined){\r\n      dispatch({type:'setFirstCard', payload: card})\r\n    } else if (firstCard.label === card.label) {\r\n      setTurns(turns + 1);\r\n      dispatch({type:'setSecondCard', payload: card})\r\n      setTimeout(()=>{\r\n        dispatch({type:'matchSelected'})\r\n      }, 500);\r\n    } else {\r\n      setTurns(turns + 1);\r\n      dispatch({type:'setSecondCard', payload: card})\r\n      setTimeout(()=>{\r\n        dispatch({type:'resetSelection'})\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  const resetClick = async () => {\r\n    dispatch({type: 'resetMatches'});\r\n    setVictory(false);\r\n    setTurns(0);\r\n    let data = await setupCards(totalCards);\r\n    setCardData(data);\r\n  }\r\n\r\n  return (\r\n    <main className=\"main\">\r\n        {victory &&\r\n          <> \r\n            <div className=\"resetContainer\">\r\n              <h2>You Win!</h2>\r\n              <button className=\"btn\" disabled={!victory} onClick={() => resetClick()}>Play Again</button>\r\n            </div>\r\n          </>\r\n        }\r\n      <div className=\"cardGrid\">\r\n        {cardData.map( (card,i) => (\r\n          <Card\r\n            {...card}\r\n            index={i}\r\n            key={key(card)}\r\n            isMatched={matchedCards.includes(card)}\r\n            isSelected={firstCard === card || secondCard === card}\r\n            selectCard={() => handleClick(card)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\nexport default CardGrid;","import React, {useState} from 'react';\r\nimport AppProvider, {AppHookProvider} from './provider/appProvider';\r\nimport Header from './components/Header/Header';\r\nimport CardGrid from './components/CardGrid/CardGrid';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const [victory, setVictory] = useState(false);\r\n  const [turns, setTurns] = useState(0);\r\n  const [altTheme, setAltTheme] = useState(false);\r\n\r\n  return (\r\n    <div className={`App${altTheme ? ' alt-theme' : ''}`}>\r\n      <AppHookProvider value={{setVictory, setTurns, setAltTheme}}>\r\n        <AppProvider value={{victory, turns, altTheme}} >\r\n          <Header />\r\n          <CardGrid />\r\n        </AppProvider>\r\n      </AppHookProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/spade.2f9b8df9.svg\";","module.exports = __webpack_public_path__ + \"static/media/coin.598cb205.svg\";","module.exports = __webpack_public_path__ + \"static/media/star.d8292b65.svg\";","module.exports = __webpack_public_path__ + \"static/media/10Coin.0447359e.svg\";","module.exports = __webpack_public_path__ + \"static/media/20Coin.556284f9.svg\";","module.exports = __webpack_public_path__ + \"static/media/1up.8b1a2ac6.svg\";","module.exports = __webpack_public_path__ + \"static/media/flower.39d6d764.svg\";","module.exports = __webpack_public_path__ + \"static/media/mushroom.97d33e8e.svg\";"],"sourceRoot":""}