{"version":3,"sources":["provider/appProvider.js","components/Header/Header.js","data/data.js","reducers/cardReducer.js","components/Card/Card.js","components/CardGrid/CardGrid.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","AppHookContext","AppHookProvider","Provider","Header","useContext","victory","turns","className","cardCount","Promise","resolve","reject","Error","uniqueCards","data","i","label","cardArray","length","j","Math","floor","random","temp","shuffle","map","card","cardReducer","state","action","type","firstCard","payload","secondCard","matchedCards","undefined","Card","index","selectCard","isSelected","isMatched","flipCard","onClick","onKeyDown","e","keyCode","aria-hidden","role","tabIndex","aria-label","CardGrid","initialState","setVictory","setTurns","useReducer","dispatch","useState","cardData","setCardData","useEffect","a","setupCards","fetchCards","resetClick","disabled","key","includes","setTimeout","handleClick","App","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.066900f8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const AppContext = React.createContext({});\r\nexport const AppHookContext = React.createContext({});\r\nexport const AppHookProvider = AppHookContext.Provider;\r\nexport default AppContext.Provider;","import React, {useContext} from 'react';\r\nimport {AppContext} from '../../provider/appProvider';\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n  const {victory, turns} = useContext(AppContext);\r\n\r\n  return (\r\n    <header>\r\n      <h1>Memory Game</h1>\r\n      <h3>Turns: {turns}</h3>\r\n      <h2 className={`victoryMessage${!victory ? ' victoryMessage--hidden' : ''}`}>You Win!</h2>      \r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","const shuffle = (cardArray) => {\r\n  for (let i = cardArray.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * i);\r\n    const temp = cardArray[i];\r\n    cardArray[i] = cardArray[j];\r\n    cardArray[j] = temp;\r\n  }\r\n  return cardArray;\r\n}\r\n\r\nexport default (cardCount) => {\r\n  return new Promise( (resolve, reject) => {\r\n    if (cardCount % 2 !== 0) reject(new Error('must request even number of cards'));\r\n    let uniqueCards = cardCount / 2;\r\n    let data = [];\r\n    for(let i = 0; i < uniqueCards; i++){\r\n      data[i] = {label: i+1};\r\n    }\r\n    data = [...data, ...data];\r\n    data = data.map( card => {\r\n      return {...card}\r\n    });\r\n    data = shuffle(data);\r\n    resolve(data);\r\n  })\r\n}\r\n","\r\nconst cardReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'setFirstCard': {\r\n      return {\r\n        ...state,\r\n        firstCard: action.payload\r\n      }\r\n    }\r\n    case 'setSecondCard': {\r\n      return {\r\n        ...state,\r\n        secondCard: action.payload\r\n      }\r\n    }\r\n    case 'matchSelected': {\r\n      return {\r\n        ...state,\r\n        matchedCards: [...state.matchedCards, state.firstCard, state.secondCard],\r\n        firstCard: undefined,\r\n        secondCard: undefined,\r\n      }\r\n    }\r\n    case 'resetSelection': {\r\n      return {\r\n        ...state,\r\n        firstCard: undefined,\r\n        secondCard: undefined,\r\n      }\r\n    }\r\n    case 'resetMatches': {\r\n      return {\r\n        ...state,\r\n        firstCard: undefined,\r\n        secondCard: undefined,\r\n        matchedCards: [],\r\n      }\r\n    }\r\n    default:\r\n      throw new Error('unrecognized action');\r\n  }\r\n}\r\nexport default cardReducer;","import React from 'react';\r\nimport './Card.scss';\r\n\r\nconst Card = ({label, index, selectCard, isSelected, isMatched}) => {\r\n  const flipCard = () => {\r\n    !isSelected && selectCard();\r\n  }\r\n  \r\n  const handleCardClick = () => {\r\n    flipCard();\r\n  }\r\n\r\n  const handleCardKeyDown = (e) => {\r\n    if (e.keyCode === 13 || e.keyCode === 32) {\r\n      flipCard();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div onClick={handleCardClick} onKeyDown={handleCardKeyDown} className={`card${isSelected ? ' card--selected' : ''}${isMatched ? ' card--matched' : ''}`} aria-hidden={isMatched} role=\"button\" tabIndex=\"0\" aria-label={`card-${index + 1}`}>\r\n      <div className=\"card__inner\">\r\n        <div className=\"card__back\">&diams;</div>\r\n        <div className=\"card__front\"><span>{label}</span></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Card;","import React, {useEffect, useState, useReducer, useContext} from 'react';\r\nimport {AppContext, AppHookContext} from '../../provider/appProvider';\r\nimport key from 'weak-key';\r\nimport setupCards from '../../data/data';\r\nimport cardReducer from '../../reducers/cardReducer';\r\n\r\nimport Card from '../Card/Card';\r\nimport './CardGrid.scss';\r\n\r\nlet totalCards = 24;\r\n\r\nconst CardGrid = () => {\r\n  const initialState = {\r\n    firstCard: undefined,\r\n    secondCard: undefined,\r\n    matchedCards: [],\r\n  \r\n  }\r\n  \r\n  const {turns, victory} = useContext(AppContext);\r\n  const {setVictory, setTurns} = useContext(AppHookContext);\r\n  const [state, dispatch] = useReducer(cardReducer, initialState);\r\n  const { matchedCards, firstCard, secondCard} = state;\r\n  const [cardData, setCardData] = useState([]);\r\n  \r\n  useEffect(()=>{\r\n    const fetchCards = async () => {\r\n      const data = await setupCards(totalCards);\r\n      setCardData(data);\r\n    }   \r\n    fetchCards();\r\n  },[]);\r\n\r\n  useEffect(()=>{\r\n    if(matchedCards.length === totalCards && !victory) {\r\n      setVictory(true)\r\n    };\r\n\r\n  }, [matchedCards, victory, setVictory]);\r\n\r\n  const handleClick = (card) => {\r\n    if(firstCard === card || secondCard !== undefined ) return;\r\n    if(firstCard === undefined){\r\n      dispatch({type:'setFirstCard', payload: card})\r\n    } else if (firstCard.label === card.label) {\r\n      setTurns(turns + 1);\r\n      dispatch({type:'setSecondCard', payload: card})\r\n      setTimeout(()=>{\r\n        dispatch({type:'matchSelected'})\r\n      }, 500);\r\n    } else {\r\n      setTurns(turns + 1);\r\n      dispatch({type:'setSecondCard', payload: card})\r\n      setTimeout(()=>{\r\n        dispatch({type:'resetSelection'})\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  const resetClick = async () => {\r\n    dispatch({type: 'resetMatches'});\r\n    setCardData([]);\r\n    setVictory(false);\r\n    setTurns(0);\r\n    let data = await setupCards(totalCards);\r\n    setCardData(data);\r\n  }\r\n\r\n  return (\r\n    <main className=\"main\">\r\n      <div className=\"resetContainer\">\r\n        {victory &&    <button className={`btn${victory? ' btn--hidden' : ''}`} disabled={!victory} onClick={() => resetClick()}>Play Again</button>}\r\n      </div>\r\n      <div className=\"cardGrid\">\r\n        {cardData.map( (card,i) => (\r\n          <Card\r\n            {...card}\r\n            index={i}\r\n            key={key(card)}\r\n            isMatched={matchedCards.includes(card)}\r\n            isSelected={firstCard === card || secondCard === card}\r\n            selectCard={() => handleClick(card)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\nexport default CardGrid;","import React, {useState} from 'react';\r\nimport AppProvider, {AppHookProvider} from './provider/appProvider';\r\nimport Header from './components/Header/Header';\r\nimport CardGrid from './components/CardGrid/CardGrid';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const [victory, setVictory] = useState(false);\r\n  const [turns, setTurns] = useState(0);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppHookProvider value={{setVictory, setTurns}}>\r\n        <AppProvider value={{victory, turns}} >\r\n          <Header />\r\n          <CardGrid />\r\n        </AppProvider>\r\n      </AppHookProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}